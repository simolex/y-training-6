const solution = require(".");

describe("C. Надпись на табло", () => {
    test("test-1", () => {
        const result = solution(4, [
            [".", "#", "#", "."],
            [".", "#", "#", "."],
            [".", "#", "#", "."],
            [".", ".", ".", "."]
        ]);
        expect(result).toBe("I");
    });
    test("test-2", () => {
        const result = solution(5, [
            ["#", ".", ".", ".", "#"],
            [".", "#", ".", "#", "."],
            [".", ".", "#", ".", "."],
            [".", "#", ".", "#", "."],
            ["#", ".", ".", ".", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-001", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });
    test("test-002", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", ".", "#", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });
    test("test-003", () => {
        const result = solution(8, [
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"]
        ]);
        expect(result).toBe("O");
    });
    test("test-004", () => {
        const result = solution(8, [
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("O");
    });

    test("test-005", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "#", "#", "#", "#", "."],
            [".", ".", ".", "#", ".", "#", "#", "."],
            [".", ".", ".", "#", "#", "#", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("O");
    });

    test("test-006", () => {
        const result = solution(8, [
            ["#", "#", "#", "#", "#", "#", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "."]
        ]);
        expect(result).toBe("C");
    });

    test("test-007", () => {
        const result = solution(8, [
            ["#", "#", "#", "#", "#", "#", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-008", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", "#", "#", "#"],
            [".", ".", ".", ".", ".", "#", ".", "."],
            [".", ".", ".", ".", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("C");
    });

    test("test-009", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", "#", "#", "#", ".", ".", "."],
            [".", ".", "#", ".", "#", ".", ".", "."],
            [".", ".", "#", "#", "#", ".", ".", "."],
            [".", ".", "#", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("P");
    });

    test("test-010", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("P");
    });

    test("test-011", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", ".", ".", "#", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });
    test("test-012", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", "#", ".", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });
    test("test-013", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });

    test("test-014", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", "#", ".", ".", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });

    test("test-015", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."],
            [".", "#", ".", ".", ".", "#", "#", "."]
        ]);
        expect(result).toBe("H");
    });
    test("test-016", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("H");
    });

    test("test-017", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", ".", "#", "#", "#"],
            [".", "#", "#", "#", ".", "#", "#", "#"],
            [".", "#", "#", "#", ".", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("X");
    });

    test("test-018", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", ".", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("H");
    });

    test("test-019", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", ".", ".", "#", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-020", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"]
        ]);
        expect(result).toBe("I");
    });
    test("test-021", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", ".", ".", "#", "#"]
        ]);
        expect(result).toBe("L");
    });
    test("test-022", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "#"]
        ]);
        expect(result).toBe("I");
    });
    test("test-023", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("I");
    });
    test("test-024", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"],
            [".", "#", ".", ".", ".", "#", "#", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-025", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", ".", ".", "."],
            [".", "#", ".", "#", "#", ".", ".", "."],
            [".", "#", "#", "#", "#", ".", ".", "."],
            [".", "#", ".", "#", "#", ".", ".", "."],
            [".", "#", "#", "#", "#", ".", ".", "."],
            [".", "#", "#", "#", "#", ".", ".", "."],
            [".", "#", "#", "#", "#", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });
    test("test-026", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "."],
            [".", "#", "#", "#", "#", "#", "#", "#"],
            [".", "#", "#", "#", "#", "#", "#", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-027", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "#", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "#"]
        ]);
        expect(result).toBe("X");
    });
    test("test-028", () => {
        const result = solution(8, [
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "."]
        ]);
        expect(result).toBe("X");
    });

    test("test-029", () => {
        const result = solution(1, [["."]]);
        expect(result).toBe("X");
    });
    test("test-030", () => {
        const result = solution(1, [["#"]]);
        expect(result).toBe("I");
    });
});
